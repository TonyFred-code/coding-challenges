Sure! Let's provide summaries, requirements, and test cases for each of these beginner-level coding challenges:

1. Capitalize Words:

Summary:
Write a function that takes a sentence as input and capitalizes the first letter of each word.

Requirements:
- You are given a string containing a sentence with words separated by spaces.
- Implement a function to capitalize the first letter of each word in the sentence and return the modified sentence.

Test Cases:
Input: "hello world"
Output: "Hello World"

Input: "this is a test"
Output: "This Is A Test"


2. Array Chunking:

Summary:
Write a function that takes an array and a chunk size as input and divides the array into sub-arrays of the given size.

Requirements:
- You are given an array of integers and a positive integer chunk size.
- Implement a function to split the array into sub-arrays, each containing at most 'chunk size' number of elements, and return a new array containing these sub-arrays.

Test Cases:
Input: [1, 2, 3, 4, 5, 6, 7, 8], chunkSize = 3
Output: [[1, 2, 3], [4, 5, 6], [7, 8]]

Input: [10, 20, 30, 40, 50], chunkSize = 2
Output: [[10, 20], [30, 40], [50]]


3. Majority Element:

Summary:
Given an array of integers, find the majority element (appears more than n/2 times, where n is the length of the array).

Requirements:
- You are given an array of integers.
- Implement a function to find the majority element in the array and return it. If there is no majority element, return -1.

Test Cases:
Input: [3, 3, 4, 2, 4, 4, 2, 4, 4]
Output: 4

Input: [1, 2, 3, 4, 5]
Output: -1


4. Reverse an Integer:

Summary:
Write a function that takes an integer as input and returns the integer in reverse order.

Requirements:
- You are given an integer as input.
- Implement a function to reverse the digits of the integer and return the reversed integer.

Test Cases:
Input: 12345
Output: 54321

Input: -987
Output: -789


5. Validate Parentheses:

Summary:
Write a function to determine if a given string of parentheses (including curly braces and square brackets) is valid.

Requirements:
- You are given a string containing only parentheses, curly braces, and square brackets.
- Implement a function to check if the parentheses are balanced and return true if they are, or false if they are not.

Test Cases:
Input: "{[()()]}"
Output: true

Input: "[{()}[{}])]"
Output: false


6. Unique Characters in a String II:

Summary:
Write a function that determines if a given string has all unique characters without using additional data structures.

Requirements:
- You are given a string containing only printable ASCII characters.
- Implement a function to check if the string has all unique characters and return true if it does, or false if there are any repeated characters.

Test Cases:
Input: "hello"
Output: false

Input: "world"
Output: true


7. Missing Letters:

Summary:
Write a function that finds the missing letter in a given sequence of consecutive letters.

Requirements:
- You are given a string containing a sequence of consecutive lowercase letters (in alphabetical order), with one letter missing.
- Implement a function to find the missing letter and return it.

Test Cases:
Input: "abcdefh"
Output: "g"

Input: "jklmno"
Output: "p"


8. Pig Latin:

Summary:
Write a function that translates a given word into Pig Latin.

Requirements:
- You are given a word (string) as input.
- Implement a function to translate the word into Pig Latin following the rules provided in the challenge description.

Test Cases:
Input: "hello"
Output: "ellohay"

Input: "apple"
Output: "appleway"


9. Simple Calculator:

Summary:
Write a function that takes two numbers and an operator (+, -, *, /) as input and performs the corresponding arithmetic operation.

Requirements:
- You are given two numbers and a valid operator as input.
- Implement a function to perform the arithmetic operation on the numbers and return the result.

Test Cases:
Input: 5, 3, '+'
Output: 8

Input: 10, 2, '/'
Output: 5


10. Find the Second Largest Number:

Summary:
Write a function that finds the second largest number in an array of integers.

Requirements:
- You are given an array of integers with at least two elements.
- Implement a function to find the second largest number in the array and return it.

Test Cases:
Input: [5, 2, 8, 3, 7]
Output: 7

Input: [10, 20, 5, 30, 15]
Output: 20


11. Sum of Even Fibonacci Numbers:

Summary:
Write a function that calculates the sum of all even Fibonacci numbers up to a given limit.

Requirements:
- You are given a positive integer as input.
- Implement a function to calculate and return the sum of all even Fibonacci numbers up to the given limit.

Test Cases:
Input: 10
Output: 10  (2 + 8)

Input: 100
Output: 44  (2 + 8 + 34)


12. Prime Factorization:

Summary:
Write a function that finds the prime factors of a given integer.

Requirements:
- You are given a positive integer as input.
- Implement a function to find and return the prime factors of the input integer in ascending order.

Test Cases:
Input: 12
Output: [2, 2, 3]

Input: 25
Output: [5, 5]


13. Consonant Count:

Summary:
Write a function that counts the number of consonants in a given string.

Requirements:
- You are given a string containing only printable ASCII characters.
- Implement a function to count the number of consonants in the string and return the count.

Test Cases:
Input: "hello"
Output: 3

Input: "world"
Output: 4


14. Binary to Decimal:

Summary:
Write a function that converts a binary number (as a string) to its decimal equivalent.

Requirements:
- You are given a binary number represented as a string.
- Implement a function to convert the binary number to its decimal equivalent and return it as an integer.

Test Cases:
Input: "1010"
Output: 10

Input: "111001"
Output: 57


15. Palindrome Pairs:

Summary:
Given a list of words, find all pairs of distinct indices (i, j) such that the concatenation of the two words is a palindrome.

Requirements:
- You are given a list of words (strings).
- Implement a function to find and return a list of pairs of indices (i, j) such that the concatenation of words[i] and words[j] is a palindrome.

Test Cases:
Input: ["code", "edoc", "da", "ad"]
Output: [[

0, 1], [1, 0], [2, 3], [3, 2]]

Input: ["race", "car", "run", "nur"]
Output: [[0, 1], [1, 0]]


These summaries, requirements, and test cases will help guide you in solving these beginner-level coding challenges. Make sure to write clean and efficient code, and thoroughly test your solutions with different inputs to ensure they work correctly in various scenarios. Happy coding!
Pig Latin is a playful and humorous word game or a form of wordplay used primarily by children and in some informal contexts. It involves altering the words by following a specific set of rules to create a new word. The game is simple and enjoyable, often used for amusement or as a playful secret code.

The rules for converting a word into Pig Latin are as follows:

1. For words that begin with consonants or consonant clusters:
   - Move the initial consonant(s) or cluster of consonants to the end of the word.
   - Add "ay" to the end of the word.

Example: "happy" → "appyhay", "glove" → "oveglay", "smile" → "ilesmay"

2. For words that begin with vowels:
   - Simply add "way" to the end of the word.

Example: "egg" → "eggway", "apple" → "appleway", "island" → "islandway"

Note: In some variations, "y" is treated as a consonant if it appears at the beginning of a word, and as a vowel otherwise.

Pig Latin is often used as a fun language game for children to play with words and create a playful atmosphere. It is a simple and lighthearted way to transform words into a new and humorous form, making it popular among kids and for certain informal communication.


